<#@ template language="C#" hostspecific="true" culture="en-US" #>
<#@ output extension="cs" #>
<# /* ------------------------ */ #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<# /* ------------------------ */ #>
<#@ import namespace="UnityEngine" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EnvDTE" #>
<# /* ------------------------ */ #>
<# 
    DTE dte = ((DTE)((IServiceProvider)Host).GetService(typeof(DTE)));
#>
// ------------------------------------
// Auto-Generated with T4 Templating on <#= dte.Name #> <#= dte.Version #>
// Template File: <#= Path.GetFileName(Host.TemplateFile) #>
// ------------------------------------
// Install T4 Toolbox if having troubles
// ------------------------------------

using System;
using System.Globalization;
using System.Runtime.CompilerServices;

using UnityEngine;
using BepInEx.Configuration;


namespace COM3D2.CameraControlEx.Plugin
{
    partial class <#= ClassName #>
    {
<#
    PushIndent("    ");
    PushIndent("    ");
   

    var _props = new List<Property>();

    foreach(var p in Properties)
        _props.Add(new Property(p.Key, p.Value));

    _props = _props.OrderBy(p => p.Type.Name).ThenBy(p => p.Name).ToList();
    
    GenerateConfigs(_props);
    GenerateProperty(_props);

    PopIndent();
    PopIndent();
 #>
 
    }
}
<#+
    private string GetValue(Property p) 
    {

        string name = p.Name;
        object val = p.Value;

        var type = val.GetType();
        
        if(type.IsEnum){
            return string.Format("{0}.{1}", type.Name, val);
        }
        else
        {
            var ic = CultureInfo.InvariantCulture;
            if(val is float)
                return string.Format("{0}f",  Convert.ToString(val, ic));
            else if (val is string)
                return string.Format("\"{0}\"", Convert.ToString(val, ic));
            else
                return string.Format("{0}",  Convert.ToString(val, ic));
        }
    }

    private void GenerateConfigs(List<Property> props)
    {
        
        CGAttribute(true);
        WriteLine("partial void InitConfig() {");
        PushIndent("    ");

        foreach(var p in props){
            string name = p.Name;
            WriteLine("ConfigEntry{0} = Config.Bind(\"Config\", \"{0}\", {1});", name,GetValue(p));
        }

        PopIndent();
        WriteLine("}");
    
    }

    private void GenerateProperty(List<Property> props)
    {
        
        foreach(var p in props)
        {
            string name = p.Name;
            object val = p.Value;
            Type type = val.GetType();
             
            Write("\r\n");
            CGAttribute(true);
            WriteLine("private ConfigEntry<{0}> ConfigEntry{1};", type.Name, name);
            CGAttribute(true);
            WriteLine("private {0} {1} => ConfigEntry{1}.Value;", type.Name, name);
            //if(type.IsEnum)
            //    WriteLine("ParseEnum(Preferences[\"Config\"][\"{0}\"].Value, {1});",name, GetValue(p));
            //else if(typeof(IConvertible).IsAssignableFrom(type)) 
            //    WriteLine("ParseConvertible(Preferences[\"Config\"][\"{0}\"].Value, {1});",name, GetValue(p));
        }
        
    }

    private void CGAttribute(bool nl){
        if(nl)
            WriteLine("[CompilerGenerated]");
        else
            Write("[CompilerGenerated] ");
    }

    private class Property {
        public object Value { get; set; }
        public string Name { get; set; }
        public Type Type { get { return Value.GetType(); } }
        public bool IsEnum { get { return Type.IsEnum; } }

        public Property(string name, object value){
            Value = value;
            Name = name;
        }
    }
#>